class IntHeap {
	field Vector v;

	constructor Field new(int n) {
		let v = Vector.new(n);
	}

	method void push(int n) {
		do v.push(n);

		do up(n.size() - 1);
	}

	method void swap(int i, int j) {
		var int t;

		let t = v.get(i);
		do v.set(i, v.get(j));
		do v.set(j, t);
	}

	method int pop() {
		var int n;
		var int l, r;

		let n = v.size() - 1;

		do swap(0, n);

		return v.pop();
	}

	method up(int j) {
		var int i;
		var int l, r;
		while (true) {
			let i = (j - 1) / 2;
			if ((i == j) || ~(v.get(j) < v.get(i))) {
				break;
			}
			do swap(i, j);
			j = i;
		}
	}

	method boolean down(int i0, int n) {
		var int i;
		var int j, j1, j2;
		var int l, r;

		while (true) {
			let j1 = 2 * i + 1;
			if (j1 > n || j1 < 0) {
				break;
			}

			let j = j1;
			let j2 = j1 + 1;
			if  j2 < n && v.get(j2) < v.get(j1) {
				j = j2;
			}

			if (~(v.get(j) < v.get(i))) {
				break;
			}
			do swap(i, j);
			i = j;
		}

		return i > i0;
	}
}