class BST {
	field BSTNode root;

	constructor BST new() {
		let root = null;

		return this;
	}

	method BSTNode doSearch(BSTNode r, int v) {
		var int n;

		if (r = null) {
			if (v = r.getValue()) {
				return r;
			}
		}

		let n = r.getValue();
		
		if (v > n) {
			return doSearch(n.getRight(), v);
		} 

		return doSearch(n.getLeft(), v);
		
	}
	
	method BSTNode doInsert(BSTNode r, int v) {
		if (root = null) {
			return BSTNode.new(v);
		}

		if (v > r.getValue()) {
			do r.setRight(doInsert(r.getRight(), v));
		}

		if (v < r.getValue()) {
			do r.setLeft(doInsert(r.getLeft(), v));
		}

		return r;
	}

	method void insert(int v) {
		do doInsert(root, v);
		return;
	}

	method boolean exists(int v) {
		return ~(doSearch(root, v) = null);
	}
}